{"version":3,"sources":["components/ExplainingLabels/ExplainingLabel.js","components/ExplainingLabels/explainingLabels.module.css","services/dialogs.js","utils/useDialogs.js","components/Typing/Typing.js","pages/Dialogs/Dialog/dialog.module.css","pages/Dialogs/dialogs.module.css","components/ExplainingLabels/MessagesLabel/MessagesExplainingLabel.js","pages/Dialogs/Dialog/Dialog.js","pages/Dialogs/DialogsList/DialogsList.js","pages/Dialogs/Dialogs.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_explainingLabels_module_css__WEBPACK_IMPORTED_MODULE_1__","_explainingLabels_module_css__WEBPACK_IMPORTED_MODULE_1___default","ExplainingLabel","_ref","children","icon","text","a","createElement","className","styles","sectionContainer","iconContainer","sectionLabel","module","exports","d","__webpack_exports__","get","getByUsername","_Http__WEBPACK_IMPORTED_MODULE_0__","_api__WEBPACK_IMPORTED_MODULE_1__","page","Http","concat","api","dialogs","username","initialState","SET_DIALOGS","ADD_DIALOGS","SET_IS_TYPING","READ_MESSAGES","reducer","state","action","type","Object","E_Projects_Shuttle_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_2__","payload","getUnique","E_Projects_Shuttle_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__","map","dialog","user","id","userId","isTyping","read","setDialogs","addDialogs","setTyping","useDialogs","_useReducer","useReducer","_useReducer2","E_Projects_Shuttle_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","dispatch","defaultDialogs","useRef","typing","firstLoading","fetchDialogs","useCallback","arguments","length","undefined","DialogsService","then","data","current","addMessage","message","index","findIndex","owner_id","sort","b","Date","created_at","search","searchedDialogs","item","startsWith","filter","Boolean","privateSearch","SearchService","_ref2","readAllMessages","setIsTyping","typingByUserId","find","clearInterval","timerId","time","now","setTimeout","push","Typing","_useState","useState","_useState2","slicedToArray","countOfDots","setCountOfDots","useEffect","clearTimeout","react_default","repeat","container","unreadContainer","infoContainer","infoHeader","avatar","myMessageIsUnread","labelContainer","MessagesExplainingLabel","style","fontSize","Dialog","ownerId","myId","createdAt","media","match","image","matches","post","window","location","host","Link","to","src","alt","DefaultAvatar","dateTime","moment","fromNow","DialogsList","React","memo","Fragment","SearchInput","Paginator","fetcher","Dialogs_Dialog_Dialog","key","propTypes","PropTypes","array","number","isRequired","func","connect","auth","_useDialogs","topicName","useMemo","wsThread","ws","getSubscription","webSocketCallback","WsTypes","MESSAGE","CONNECTION","READ","receiver_id","IS_TYPING","on","off","MessagesLabel_MessagesExplainingLabel","DialogsList_DialogsList"],"mappings":"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","file":"static/js/16.b32bfece.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport styles  from './explainingLabels.module.css';\r\n\r\nconst ExplainingLabel = ({children, icon, text}) => (\r\n    <div className={styles.sectionContainer}>\r\n        <div className={styles.iconContainer}>\r\n            {icon}\r\n        </div>\r\n        <span className={styles.sectionLabel}>{text}</span>\r\n        {children}\r\n    </div>\r\n);\r\n\r\nExplainingLabel.propTypes = {\r\n    children: PropTypes.element,\r\n    icon: PropTypes.element.isRequired,\r\n    text: PropTypes.string.isRequired\r\n};\r\n\r\nexport default ExplainingLabel;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sectionContainer\":\"explainingLabels_sectionContainer__1n9BX\",\"iconContainer\":\"explainingLabels_iconContainer__1r1N2\",\"sectionLabel\":\"explainingLabels_sectionLabel__Jgmvz\"};","import Http from \"../Http\";\nimport {api} from \"./api\";\n\nexport const get = (page) => Http.get(`${api.dialogs}?page=${page}`);\n\nexport const getByUsername = (username, page) => Http.get(`${api.dialogs}/${username}?page=${page}`);\n","import {useCallback, useReducer, useRef} from \"react\"\nimport {getUnique} from \"utils/getUnique\";\nimport * as SearchService from 'services/search';\nimport * as DialogsService from 'services/dialogs';\n\nconst initialState = {\n  dialogs: []\n};\n\nconst SET_DIALOGS = 'SET_DIALOGS';\nconst ADD_DIALOGS = 'ADD_DIALOGS';\nconst SET_IS_TYPING = 'SET_IS_TYPING';\nconst READ_MESSAGES = 'READ_MESSAGES';\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case SET_DIALOGS:\n      return {...state, dialogs: action.payload};\n    case ADD_DIALOGS:\n      return {...state, dialogs: getUnique([...state.dialogs, ...action.payload])};\n    case SET_IS_TYPING:\n      return {\n        ...state, dialogs: state.dialogs.map(dialog => {\n          if (dialog.user.id === action.payload.userId) {\n            dialog.isTyping = action.payload.state;\n            return {...dialog};\n          }\n          return dialog;\n        })\n      };\n    case READ_MESSAGES:\n      return {\n        ...state,\n        dialogs: state.dialogs.map(dialog => {\n          if (!dialog.read && dialog.user.id === action.payload) {\n            dialog.read = true;\n            return {...dialog};\n          }\n          return dialog;\n        })\n      };\n    default:\n      break;\n  }\n}\n\nconst setDialogs = (payload) => ({type: SET_DIALOGS, payload});\nconst addDialogs = (payload) => ({type: ADD_DIALOGS, payload});\nconst setTyping = (payload) => ({type: SET_IS_TYPING, payload});\nconst readMessages = (payload) => ({type: READ_MESSAGES, payload});\n\nconst useDialogs = () => {\n  const [{dialogs}, dispatch] = useReducer(reducer, initialState);\n  let defaultDialogs = useRef([]);\n  let typing = useRef([]);\n  let firstLoading = useRef(false);\n\n  const fetchDialogs = useCallback((page = 1) => {\n    return DialogsService.get(page)\n      .then(({data}) => {\n        if (!firstLoading.current)\n          firstLoading.current = true;\n\n        defaultDialogs.current = [...defaultDialogs.current, ...data.data];\n        dispatch(addDialogs(data.data));\n        return data;\n      });\n  }, [firstLoading, defaultDialogs]);\n\n  const search = (username) => {\n    if (username.length > 0) {\n      const searchedDialogs = defaultDialogs.current.map(item => {\n          if (item.user && item.user.username && item.user.username.startsWith(username))\n            return item;\n          return undefined;\n        }\n      ).filter(Boolean);\n      dispatch(setDialogs(typeof searchedDialogs === 'undefined' ? [] : searchedDialogs));\n    } else if (dialogs.length !== defaultDialogs.current.length) {\n      dispatch(setDialogs(defaultDialogs.current));\n    }\n  };\n\n  const privateSearch = (username = '', page = 1) => {\n    if (username.length > 0) {\n      return SearchService.privateSearch(username, page)\n        .then(({data}) => {\n          page === 1 ? dispatch(setDialogs(data.data)) : dispatch(addDialogs(data.data));\n          return data;\n        });\n    } else if (dialogs.length !== defaultDialogs.current.length) {\n      dispatch(setDialogs(defaultDialogs.current));\n    }\n  };\n\n  const addMessage = (message) => {\n    const index = defaultDialogs.current.findIndex(dialog => dialog.user.id === message.owner_id);\n    if (index !== -1) {\n      defaultDialogs.current = defaultDialogs.current.map(dialog => {\n        if (dialog.user.id === message.owner_id)\n          dialog = message;\n        return dialog;\n      });\n    } else\n      defaultDialogs.current = [\n        ...defaultDialogs.current,\n        message\n      ];\n\n    defaultDialogs.current = defaultDialogs.current.sort(\n      (a, b) => new Date(b.created_at) - new Date(a.created_at)\n    );\n    dispatch(setDialogs(defaultDialogs.current));\n  };\n\n  const readAllMessages = (id) => {\n    dispatch(readMessages(id));\n  };\n\n  const setIsTyping = (userId) => {\n    dispatch(setTyping({userId, state: true}));\n\n    const typingByUserId = typing.current.find(item => item.userId === userId);\n    if (typingByUserId) {\n      clearInterval(typingByUserId.timerId);\n      typing.current = typing.current.filter(item => item.userId !== userId);\n    }\n\n    const time = Date.now();\n    const timerId = setTimeout(() => {\n      if (time + 1500 <= Date.now()) {\n        typing.current = typing.current.filter(item => item.userId !== userId);\n        dispatch(setTyping({userId, state: false}));\n      }\n    }, 1600);\n\n    typing.current.push({\n      timerId,\n      userId\n    });\n  };\n\n  return {\n    dialogs,\n    addMessage,\n    search,\n    privateSearch,\n    readAllMessages,\n    setIsTyping,\n    fetchDialogs,\n    firstLoading: firstLoading.current,\n    defaultDialogs: defaultDialogs.current\n  }\n};\n\nexport default useDialogs;\n","import React, {useEffect, useState} from \"react\";\nimport PropTypes from 'prop-types';\n\nconst Typing = ({ className }) => {\n  const [countOfDots, setCountOfDots] = useState(3);\n\n  useEffect(() => {\n    const id = setTimeout(() => {\n      setCountOfDots(countOfDots === 3 ? 1 : countOfDots + 1)\n    }, 300);\n    return () => clearTimeout(id);\n  });\n\n  return (\n    <span className={className}>is typing {'.'.repeat(countOfDots)}</span>\n  )\n};\n\nTyping.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Typing;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"dialog_container__3OWkF\",\"unreadContainer\":\"dialog_unreadContainer__3wec2 dialog_container__3OWkF\",\"infoContainer\":\"dialog_infoContainer__3CH20\",\"infoHeader\":\"dialog_infoHeader__2nIIN\",\"username\":\"dialog_username__2UrDo\",\"avatar\":\"dialog_avatar__2cC0x\",\"text\":\"dialog_text__LeY7b\",\"myMessageIsUnread\":\"dialog_myMessageIsUnread__3YHSS dialog_text__LeY7b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"dialogs_container__3byAz\",\"labelContainer\":\"dialogs_labelContainer__2gUuQ\"};","import React from \"react\";\r\nimport ExplainingLabel from \"../ExplainingLabel\";\r\nimport {Icon} from \"antd\"\r\n\r\nconst MessagesExplainingLabel = () =>\r\n  <ExplainingLabel icon={<Icon type='message' style={{fontSize: '24px'}}/>} text='No messages yet'>\r\n    <span>\r\n      Write a message to one of your friends, it's easy!\r\n    </span>\r\n  </ExplainingLabel>\r\n\r\nexport default MessagesExplainingLabel;\r\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport {Link} from \"react-router-dom\"\nimport moment from 'moment'\n\nimport DefaultAvatar from \"components/DefaultAvatar\"\nimport Typing from \"components/Typing\";\n\nimport styles from './dialog.module.css';\n\n\nconst Dialog = ({ownerId, username, avatar, text, read, myId, createdAt, isTyping}) => {\n  const media = text.match(/https?:\\/\\/[^\"' ]+\\.(?:png|jpg|jpeg|gif|mp4).*?(?=( |$))/g, '');\n\n  const image = media && media.length > 0 && 'Image';\n  const matches = text.match(/^https?:\\/\\/([^/?#]+)(?:[/?#]|$)/i);\n  const post = matches && matches.length >= 2 && matches[1] === window.location.host && 'Post';\n\n  return (\n    <div className={!read && ownerId !== myId ? styles.unreadContainer : styles.container}>\n      <Link to={`/${username}`} className={styles.avatar}>\n        {\n          avatar ? <img src={avatar} alt={'avatar'} /> : <DefaultAvatar fontSize={'30px'} />\n        }\n      </Link>\n      <Link to={`/u/messages/${username}`} className={styles.infoContainer}>\n        <div className={styles.infoHeader}>\n          <span className={styles.username}>{username}</span>\n          <time dateTime={createdAt}>{moment(new Date(createdAt), \"YYYYMMDD\").fromNow()}</time>\n        </div>\n        {\n          isTyping\n            ? <Typing/>\n            : <div className={!read && ownerId === myId ? styles.myMessageIsUnread : styles.text}>{post || image || text}</div>\n        }\n      </Link>\n    </div>\n  );\n};\n\nDialog.propTypes = {\n  ownerId: PropTypes.number.isRequired,\n  username: PropTypes.string.isRequired,\n  avatar: PropTypes.string,\n  text: PropTypes.string.isRequired,\n  read: PropTypes.number,\n  myId: PropTypes.number.isRequired,\n  createdAt: PropTypes.string.isRequired,\n  isTyping: PropTypes.bool\n};\n\nexport default Dialog;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport SearchInput from \"components/SearchInput/SearchInput\";\nimport Paginator from \"components/Paginator\";\n\nimport Dialog from \"../Dialog\"\n\nconst DialogsList = React.memo(({dialogs, myId, fetchDialogs, search}) => (\n  <>\n    <SearchInput search={search}/>\n    <Paginator fetcher={fetchDialogs}>\n      {\n        dialogs.map(((item, index) =>\n            <Dialog\n              key={index}\n              avatar={item.user.avatar}\n              ownerId={item.owner_id}\n              username={item.user.username}\n              text={item.message}\n              myId={myId}\n              read={item.read}\n              createdAt={item.created_at}\n              isTyping={item.isTyping}\n            />\n        ))\n      }\n    </Paginator>\n  </>\n));\n\nDialogsList.propTypes = {\n  dialogs: PropTypes.array,\n  myId: PropTypes.number.isRequired,\n  search: PropTypes.func.isRequired,\n  fetchDialogs: PropTypes.func.isRequired\n};\n\nexport default DialogsList;\n","import React, {useEffect, useMemo} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\n\nimport MessagesExplainingLabel from \"components/ExplainingLabels/MessagesLabel/MessagesExplainingLabel\"\nimport useDialogs from \"utils/useDialogs\"\n\nimport ws, {types as WsTypes} from \"../../Ws\"\n\nimport DialogsList from \"./DialogsList\"\n\nimport styles from './dialogs.module.css';\n\n\nconst Dialogs = ({myId}) => {\n  const {\n    dialogs,\n    addMessage,\n    readAllMessages,\n    search,\n    setIsTyping,\n    firstLoading,\n    fetchDialogs,\n    defaultDialogs\n  } = useDialogs();\n\n  const topicName = useMemo(() => `dialogs:${myId}`, [myId]);\n\n  useEffect(() => {\n    let wsThread = ws.getSubscription(topicName);\n\n    const webSocketCallback = (data) => {\n      switch (data.type) {\n        case WsTypes.MESSAGE:\n          addMessage(data.message);\n          break;\n        case WsTypes.CONNECTION:\n          readAllMessages(data.receiver_id);\n          break;\n        case WsTypes.READ:\n          readAllMessages(data.receiver_id);\n          break;\n        case WsTypes.IS_TYPING:\n          setIsTyping(data.owner_id);\n          break;\n        default:\n          break;\n      }\n    };\n\n    if (wsThread) {\n      wsThread.on('message', webSocketCallback);\n      return () => wsThread.off('message', webSocketCallback);\n    }\n  }, []);\n\n  return (\n    <div className={styles.container}>\n      {\n        firstLoading && defaultDialogs.length === 0 ?\n          <div className={styles.labelContainer}>\n            <MessagesExplainingLabel/>\n          </div>\n          :\n          <DialogsList\n            dialogs={dialogs}\n            search={search}\n            fetchDialogs={fetchDialogs}\n            myId={myId}\n          />\n      }\n    </div>\n  )\n};\n\nDialogs.propTypes = {\n  myId: PropTypes.number.isRequired,\n};\n\nexport default connect((state) => ({\n  myId: state.auth.user.id\n}))(Dialogs);\n\n"],"sourceRoot":""}